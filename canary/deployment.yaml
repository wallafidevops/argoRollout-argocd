apiVersion: v1
kind: Service
metadata:
  name: webcolor
spec:
  selector:
    app: webcolor 
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer
---    
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: webcolor
spec:
  replicas: 4
  selector:
    matchLabels:
      app: webcolor
  template:
    metadata:
      labels:
        app: webcolor
    spec:
      containers:
      - name: webcolor
        image: fabricioveronez/web-color:blue
        ports:
        - containerPort: 80
  minReadySeconds: 30
  strategy:
    canary:
      steps:
      - setWeight: 25
      - pause: {}
      - setWeight: 50
      - pause: {}
      - setWeight: 100     
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: webcolor
#   annotations:
#     alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig":
#       { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'  
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip
#     alb.ingress.kubernetes.io/backend-protocol: HTTP
#     alb.ingress.kubernetes.io/subnets: subnet-01163f9b99019c875, subnet-008e307d1ef7f8aae
#     alb.ingress.kubernetes.io/healthcheck-path: /
#     alb.ingress.kubernetes.io/healthcheck-port: "80"    
#     alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:216989136189:certificate/6e3207c2-a1d1-4745-81d9-f517eba3dacf"
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]' 
#     # alb.ingress.kubernetes.io/group.name: grupo-ingress    
# spec:
#   ingressClassName: alb  
#   rules:
#   - http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: webcolor       
#             # name: argo-cd-argocd-server
#             port:
#               number: 80
